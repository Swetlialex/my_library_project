import json

import re

import shutil

class Library:
    def __init__(self):
        self.books = {}

# –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ç–∞ –æ—Ç json —Ñ–∞–π–ª

    def load_from_file(self, filename):
        try:
            with open(filename, "r", encoding="utf-8") as f:
                self.books = json.load(f)
            print(f"–ó–∞—Ä–µ–¥–µ–Ω–∏ –∫–Ω–∏–≥–∏ –æ—Ç {filename}")
        except FileNotFoundError:
            print(f"–§–∞–π–ª—ä—Ç {filename} –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞. –ó–∞–ø–æ—á–≤–∞–º–µ —Å –ø—Ä–∞–∑–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞.")
        except json.JSONDecodeError:
            print(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ {filename}. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ JSON.")


# –∑–∞–ø–∏—Å –Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ç–∞ –≤ json —Ñ–∞–π–ª

    def save_to_file(self, filename):
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self.books, f, ensure_ascii=False, indent=4)
        print(f"–ó–∞–ø–∏—Å–∞–Ω–∏ –∫–Ω–∏–≥–∏ –≤ {filename}")


# –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–Ω–∏–≥–∞

    def add_book(self, **kwargs):
        isbn = kwargs.get("ISBN")
        if not isbn:
            raise ValueError("ISBN –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ –ø–æ–ª–µ.")
        self.books[isbn] = {
            "Title": kwargs.get("Title", ""),
            "Author_s": kwargs.get("Author_s", []),
            "Publication_Year": kwargs.get("Publication_Year", None),
            "Publisher": kwargs.get("Publisher", ""),
            "Genre": kwargs.get("Genre", ""),
            "Page_Count": kwargs.get("Page_Count", 0),
            "Format": kwargs.get("Format", ""),
            "Price": kwargs.get("Price", 0.0),
            "Purchase_Date": kwargs.get("Purchase_Date", ""),
            "Personal_Rating": kwargs.get("Personal_Rating", None),
            "Read_Status": kwargs.get("Read_Status", "unread"),
            "Tags_Notes": kwargs.get("Tags_Notes", "")
        }

# —Å–ø–∏—Å—ä–∫ —Å –∫–Ω–∏–≥–∏—Ç–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ç–∞

    def list_books(self):
        if not self.books:
            print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ç–∞ –µ –ø—Ä–∞–∑–Ω–∞.")
            return

        for isbn, book in self.books.items():
            print(f"Title: {book['Title']}")
            print(f"Author(s): {', '.join(book['Author_s'])}")
            print(f"ISBN: {isbn}")
            print(f"Year: {book['Publication_Year']}")
            print(f"Publisher: {book['Publisher']}")
            print(f"Genre: {book['Genre']}")
            print(f"Pages: {book['Page_Count']}")
            print(f"Format: {book['Format']}")
            print(f"Price: {book['Price']} –ª–≤")
            print(f"Purchase Date: {book['Purchase_Date']}")
            print(f"Rating: {book['Personal_Rating']}/5")
            print(f"Status: {book['Read_Status']}")
            print(f"Notes: {book['Tags_Notes']}")
            print("‚Äî" * 40)


# —Ç—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∫–Ω–∏–≥–∞

    def find_book(self, isbn):
        return self.books.get(isbn, None)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∫–Ω–∏–≥–∞—Ç–∞ –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ç–∞

    def find_book_by_title(self, title):
        title = title.lower()
        for isbn, book in self.books.items():
            if book["Title"].lower() == title:
                return book
        return None

# —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∞ –∫–Ω–∏–≥–∞

    def edit_book(self, isbn, **kwargs):
        if isbn not in self.books:
            print(f"–ù—è–º–∞ –∫–Ω–∏–≥–∞ —Å ISBN: {isbn}")
            return

        for key, value in kwargs.items():
            if key in self.books[isbn]:
                self.books[isbn][key] = value
                print(f"–û–±–Ω–æ–≤–µ–Ω–æ: {key} ‚Üí {value}")
            else:
                print(f"–ü–æ–ª–µ—Ç–æ '{key}' –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞.")


# –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∫–Ω–∏–≥–∞ –ø–æ ISBN

    def remove_book(self, isbn):
            if isbn in self.books:
                confirm = input(f"–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ –∫–Ω–∏–≥–∞—Ç–∞ —Å ISBN {isbn}? (–¥–∞/–Ω–µ): ")
                if confirm.lower() == "–¥–∞":
                    del self.books[isbn]
                    print("–ö–Ω–∏–≥–∞—Ç–∞ –±–µ—à–µ –∏–∑—Ç—Ä–∏—Ç–∞.")
                else:
                    print("–û–ø–µ—Ä–∞—Ü–∏—è—Ç–∞ –±–µ—à–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            else:
                print("–ù—è–º–∞ —Ç–∞–∫–∞–≤–∞ –∫–Ω–∏–≥–∞.")


# —Ç—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∫–Ω–∏–≥–∞ –ø–æ –∑–∞–≥–ª–∞–≤–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä, –∏–ª–∏ ISBN

    def search_books(self, query):
        query = query.lower().strip()
        pattern = re.compile(rf'\b{re.escape(query)}\b', re.IGNORECASE)
        results = []

        for isbn, book in self.books.items():
            title = book.get("Title", "")
            authors = book.get("Author_s", [])

            if (
                pattern.search(title)
                or any(pattern.search(author) for author in authors)
                or query in isbn.lower()
            ):
                results.append((isbn, book))

        return results


# —Ä–∞–∑—à–∏—Ä–µ–Ω–æ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ –∂–∞–Ω—Ä, —Å—Ç–∞—Ç—É—Å, –≥–æ–¥–∏–Ω–∞, —Ä–µ–π—Ç–∏–Ω–≥, —Ç–∞–≥–æ–≤–µ

    def filter_books(self, genres=None, status=None, year_range=None, rating_range=None, tags=None):
        results = []
        for isbn, book in self.books.items():
            if genres and book["Genre"] not in genres:
                continue
            if status and book["Read_Status"].lower() != status.lower():
                continue
            if year_range:
                year = book["Publication_Year"]
                if not (year_range[0] <= year <= year_range[1]):
                    continue
            if rating_range:
                rating = book["Personal_Rating"]
                if rating is None or not (rating_range[0] <= rating <= rating_range[1]):
                    continue
            if tags:
                if not any(tag.lower() in book["Tags_Notes"].lower() for tag in tags):
                    continue
            results.append((isbn, book))
        return results


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â –±—Ä–æ–π –∫–Ω–∏–≥–∏ / –æ–±—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ –∫–æ–ª–µ–∫—Ü–∏—è—Ç–∞

    def generate_statistics(self):
        total_books = len(self.books)
        total_value = sum(book.get("Price", 0.0) for book in self.books.values())

        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –∫–æ–ª–µ–∫—Ü–∏—è—Ç–∞:")
        print("*"*40)
        print(f"‚Ä¢ –û–±—â –±—Ä–æ–π –∫–Ω–∏–≥–∏: {total_books}")
        print(f"‚Ä¢ –û–±—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç: {total_value:.2f} –ª–≤")
        print("*"*40)

    

# –ñ–∞–Ω—Ä–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–Ω–∏–≥–∏—Ç–µ –ø–æ –∂–∞–Ω—Ä 

    def generate_statistics_genre(self):
        
        genre_counts = {"–ø—Ä–æ–∑–∞": 0, "–ø–æ–µ–∑–∏—è": 0, "–¥—Ä—É–≥–æ": 0}
        for book in self.books.values():
            genre = book.get("Genre", "").strip().lower()
            if genre == "–ø—Ä–æ–∑–∞":
                genre_counts["–ø—Ä–æ–∑–∞"] += 1
            elif genre == "–ø–æ–µ–∑–∏—è":
                genre_counts["–ø–æ–µ–∑–∏—è"] += 1
            else:
                genre_counts["–¥—Ä—É–≥–æ"] += 1

        print("–†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–Ω–∏–≥–∏—Ç–µ –ø–æ –∂–∞–Ω—Ä:")
        print("*"*40)
        for genre, count in genre_counts.items():
            print(f"  - {genre.capitalize()}: {count}")
        print("*"*40)


#  –°—ä–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–æ—á–µ—Ç–µ–Ω–∏ —Å–ø—Ä—è–º–æ –Ω–µ–ø—Ä–æ—á–µ—Ç–µ–Ω–∏ –∫–Ω–∏–≥–∏  
    
    def generate_statistics_read_unread(self):
        
        status_counts = {"–ø—Ä–æ—á–µ—Ç–µ–Ω–∞": 0, "–Ω–µ–ø—Ä–æ—á–µ—Ç–µ–Ω–∞": 0, "–≤ –ø—Ä–æ—Ü–µ—Å –Ω–∞ —á–µ—Ç–µ–Ω–µ": 0}
        for book in self.books.values():
            status = book.get("Read_Status", "").strip().lower()
            if status == "–ø—Ä–æ—á–µ—Ç–µ–Ω–∞":
                status_counts["–ø—Ä–æ—á–µ—Ç–µ–Ω–∞"] += 1
            elif status == "–Ω–µ–ø—Ä–æ—á–µ—Ç–µ–Ω–∞":
                status_counts["–Ω–µ–ø—Ä–æ—á–µ—Ç–µ–Ω–∞"] += 1
            else:
                status_counts["–≤ –ø—Ä–æ—Ü–µ—Å –Ω–∞ —á–µ—Ç–µ–Ω–µ"] += 1

        print("–†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–Ω–∏–≥–∏—Ç–µ –ø–æ —Å—Ç–∞—Ç—É—Å:")
        print("*"*40)
        for status, count in status_counts.items():
           print(f"  - {status.capitalize()}: {count}")
            
        print("*"*40)
